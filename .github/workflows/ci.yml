name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.11'

jobs:
  # Security and secrets scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          extra_args: --only-verified --no-update --fail
        continue-on-error: true

  # Frontend testing and build
  frontend:
    name: Frontend (LifeCraft Bot)
    runs-on: ubuntu-latest
    needs: security
    continue-on-error: true
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: test_wfed119
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma client
        run: npx prisma generate
        env:
          DATABASE_URL: "file:./dev.db"
        continue-on-error: true

      - name: Run linting
        run: npm run lint

      - name: Run type checking
        run: npx tsc --noEmit

      - name: Build application
        run: npm run build
        env:
          DATABASE_URL: "file:./dev.db"
          ANTHROPIC_API_KEY: sk-test-key
          OPENAI_API_KEY: sk-test-key
          SESSION_SECRET: test-secret
        continue-on-error: true

      # - name: Run tests
      #   run: npm test
      #   env:
      #     DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_wfed119

  # Backend/RAG testing
  backend:
    name: Backend (RAG Services)
    runs-on: ubuntu-latest
    needs: security
    continue-on-error: true
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: test_wfed119
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      # qdrant:
      #   image: qdrant/qdrant:latest
      #   ports:
      #     - 6333:6333
      #   options: >-
      #     --health-cmd "curl -f http://localhost:6333/health"
      #     --health-interval 30s
      #     --health-timeout 10s
      #     --health-retries 3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      # - name: Run Python tests
      #   run: python -m pytest tests/
      #   env:
      #     DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_wfed119
      #     QDRANT_URL: http://localhost:6333

      - name: Run Python linting
        run: |
          if command -v flake8 &> /dev/null; then
            flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          fi

  # Docker build test (disabled for now)
  # docker:
  #   name: Docker Build
  #   runs-on: ubuntu-latest
  #   needs: [frontend, backend]
  #   if: github.event_name == 'push'
  #   
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Build Docker image
  #       run: |
  #         docker build -t wfed119:${{ github.sha }} .

  #     - name: Test Docker compose
  #       run: |
  #         docker-compose config

  # Deployment (future)
  deploy:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [frontend, backend]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Deploy to staging
        run: |
          echo "Deployment step placeholder"
          echo "Would deploy to staging environment"
          # Add actual deployment commands here