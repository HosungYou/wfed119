// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id            String   @id @default(uuid())
  sessionId     String   @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  currentStage  String   @default("initial")
  conversations Conversation[]
  strengths     Strength[]
  completed     Boolean  @default(false)
}

model Conversation {
  id        String   @id @default(uuid())
  sessionId String
  session   Session  @relation(fields: [sessionId], references: [sessionId])
  role      String   // "user" or "assistant"
  content   String
  timestamp DateTime @default(now())
  metadata  String?  // JSON string for additional analysis data
}

model Strength {
  id         String   @id @default(uuid())
  sessionId  String
  session    Session  @relation(fields: [sessionId], references: [sessionId])
  category   String   // "skill", "attitude", "value"
  name       String
  evidence   String
  confidence Float    // 0-1 신뢰도
  createdAt  DateTime @default(now())
}


/// User roles for access control
enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

/// Authenticated user (Google OAuth)
model User {
  id        String   @id @default(uuid())
  googleId  String   @unique
  email     String?  @unique
  name      String?
  image     String?
  role      UserRole @default(USER)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userSessions UserSession[]
  valueResults ValueResult[]
  auditLogs    AuditLog[]
}

/// User sessions for comprehensive tracking
model UserSession {
  id           String   @id @default(uuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  sessionId    String   @unique
  sessionType  String   @default("general") // "strengths", "values", "enneagram"
  currentStage String   @default("initial")
  completed    Boolean  @default(false)
  completedAt  DateTime?
  startedAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

/// Audit log for admin actions
model AuditLog {
  id          String   @id @default(uuid())
  userId      String?
  user        User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  action      String   // "CREATE", "UPDATE", "DELETE", "LOGIN", "ACCESS_ADMIN"
  tableName   String?  // Table affected
  recordId    String?  // Record ID affected
  oldValues   Json?    // Previous values (for updates)
  newValues   Json?    // New values (for creates/updates)
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime @default(now())
}

/// Update ValueResult to include user relation
model ValueResult {
  id         String   @id @default(uuid())
  userId     String
  user       User     @relation(fields: [userId], references: [googleId], onDelete: Cascade)
  valueSet   String   // 'terminal' | 'instrumental' | 'work'
  layout     Json     // { very_important: string[], important: string[], somewhat_important: string[], not_important: string[] }
  top3       Json
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Ensure one record per user per set
  @@unique([userId, valueSet])
}
