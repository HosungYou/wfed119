// Enhanced Prisma schema with admin permissions and user data integration
// This schema supports both PostgreSQL and SQLite (with PostgreSQL recommended for production)

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // Change to "sqlite" for local development
  url      = env("DATABASE_URL")
}

// =================== USER & AUTHENTICATION ===================

model User {
  id            String   @id @default(uuid())
  googleId      String   @unique
  email         String?  @unique
  name          String?
  image         String?
  role          UserRole @default(USER)
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  sessions      UserSession[]
  valueResults  ValueResult[]
  adminGroups   AdminGroup[]  @relation("AdminGroupMembers")
  ownedGroups   AdminGroup[]  @relation("AdminGroupOwner")
  sharedData    SharedData[]
  auditLogs     AuditLog[]
  analysisResults AnalysisResult[]
  strengthProfiles StrengthProfile[]
}

enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

// =================== SESSION MANAGEMENT ===================

model UserSession {
  id            String   @id @default(uuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  sessionType   String   // 'strengths' | 'values' | 'enneagram' | 'career'
  sessionId     String   @unique
  currentStage  String   @default("initial")
  completed     Boolean  @default(false)
  startedAt     DateTime @default(now())
  completedAt   DateTime?
  updatedAt     DateTime @updatedAt

  // Relations
  conversations Conversation[]
  strengths     Strength[]
  metadata      Json?    // Additional session-specific data

  @@index([userId, sessionType])
  @@index([completed])
}

model Conversation {
  id            String      @id @default(uuid())
  sessionId     String
  session       UserSession @relation(fields: [sessionId], references: [sessionId], onDelete: Cascade)
  role          String      // "user" or "assistant"
  content       String      @db.Text
  timestamp     DateTime    @default(now())
  metadata      Json?       // Analysis data, tokens used, etc.

  @@index([sessionId])
}

model Strength {
  id            String      @id @default(uuid())
  sessionId     String
  session       UserSession @relation(fields: [sessionId], references: [sessionId], onDelete: Cascade)
  category      String      // "skill", "attitude", "value"
  name          String
  evidence      String      @db.Text
  confidence    Float       // 0-1 confidence score
  createdAt     DateTime    @default(now())
  userEmail     String?
  userGoogleId  String?
  userName      String?

  @@index([sessionId, category])
}

// =================== VALUES DISCOVERY ===================

model ValueResult {
  id            String   @id @default(uuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  valueSet      String   // 'terminal' | 'instrumental' | 'work'
  layout        Json     // Categorized values layout
  top3          Json     // Top 3 selected values
  insights      Json?    // AI-generated insights
  moduleVersion String?  @default("v1")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([userId, valueSet])
  @@index([userId])
}

model StrengthProfile {
  id            String   @id @default(uuid())
  sessionId     String   @unique
  userId        String?
  user          User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  userEmail     String?
  strengths     Json
  summary       String?
  insights      Json?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([userId])
  @@index([userEmail])
}

// =================== ADMIN & COLLABORATION ===================

model AdminGroup {
  id            String   @id @default(uuid())
  name          String
  description   String?
  ownerId       String
  owner         User     @relation("AdminGroupOwner", fields: [ownerId], references: [id])
  members       User[]   @relation("AdminGroupMembers")
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  sharedData    SharedData[]
  permissions   GroupPermission[]
}

model GroupPermission {
  id            String      @id @default(uuid())
  groupId       String
  group         AdminGroup  @relation(fields: [groupId], references: [id], onDelete: Cascade)
  resource      String      // 'all' | 'values' | 'strengths' | 'sessions'
  action        String      // 'view' | 'export' | 'analyze' | 'manage'
  createdAt     DateTime    @default(now())

  @@unique([groupId, resource, action])
  @@index([groupId])
}

model SharedData {
  id            String      @id @default(uuid())
  userId        String
  user          User        @relation(fields: [userId], references: [id])
  groupId       String
  group         AdminGroup  @relation(fields: [groupId], references: [id])
  dataType      String      // 'values' | 'strengths' | 'analysis' | 'all'
  dataId        String?     // Reference to specific data item
  permissions   String[]    // ['view', 'export', 'comment']
  sharedAt      DateTime    @default(now())
  expiresAt     DateTime?

  @@unique([userId, groupId, dataType])
  @@index([groupId])
  @@index([userId])
}

// =================== ANALYSIS & INSIGHTS ===================

model AnalysisResult {
  id            String   @id @default(uuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  analysisType  String   // 'comprehensive' | 'values' | 'strengths' | 'personality'
  results       Json     // Detailed analysis results
  summary       String?  @db.Text
  recommendations Json?  // Career, development recommendations
  generatedAt   DateTime @default(now())

  @@index([userId, analysisType])
}

// =================== AUDIT & COMPLIANCE ===================

model AuditLog {
  id            String   @id @default(uuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  action        String   // 'view' | 'export' | 'share' | 'delete' | 'modify'
  resource      String   // Resource type accessed
  resourceId    String?  // Specific resource ID
  details       Json?    // Additional context
  ipAddress     String?
  userAgent     String?
  timestamp     DateTime @default(now())

  @@index([userId])
  @@index([action])
  @@index([timestamp])
}

// =================== DATA EXPORT & REPORTS ===================

model ExportRequest {
  id            String   @id @default(uuid())
  requestedBy   String   // User ID
  requestType   String   // 'personal' | 'group' | 'admin'
  filters       Json?    // Export filters and parameters
  status        String   // 'pending' | 'processing' | 'completed' | 'failed'
  fileUrl       String?  // Generated file URL
  expiresAt     DateTime?
  createdAt     DateTime @default(now())
  completedAt   DateTime?

  @@index([requestedBy])
  @@index([status])
}
